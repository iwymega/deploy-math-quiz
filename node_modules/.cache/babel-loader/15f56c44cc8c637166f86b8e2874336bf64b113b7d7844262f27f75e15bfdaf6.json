{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = [\"onClick\"];\nconst _hoisted_3 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [$data.isQuizStarted ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h4\", null, _toDisplayString($data.operandLeft) + \" \" + _toDisplayString($props.operator) + \" \" + _toDisplayString($data.operandRight), 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.answer, (answer, index) => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      onClick: $event => $options.selectAnswer(answer),\n      key: index\n    }, _toDisplayString(answer), 9 /* TEXT, PROPS */, _hoisted_2);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true), !$data.isQuizStarted ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.startQuiz && $options.startQuiz(...args))\n  }, \"Start\")])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = $event => _ctx.$emit('onBack'))\n  }, \"Back\")]);\n}","map":{"version":3,"mappings":";;;;;;;;;uBACEA,oBAiBM,cAhBOC,mBAAa,kBAAxBD,oBAUM,oBATJE,oBAA4D,6BAArDD,iBAAW,IAAG,GAAC,oBAAGE,eAAQ,IAAG,GAAC,oBAAGF,kBAAY,qCAEpDD,oBAMSI,6BAJmBC,WAAM,GAAxBC,MAAM,EAAEC,KAAK;yBAFvBP,oBAMS;MALNQ,OAAK,YAAEC,qBAAY,CAACH,MAAM;MAE1BI,GAAG,EAAEH;wBAEHD,MAAM;0EAIDL,mBAAa,kBAAzBD,oBAEM,oBADJE,oBAAyC;IAAhCM,OAAK,yCAAEC,iDAAS;KAAE,OAAK,0CAElCP,oBAA8C;IAArCM,OAAK,sCAAEH,UAAK;KAAY,MAAI","names":["_createElementBlock","$data","_createElementVNode","$props","_Fragment","_ctx","answer","index","onClick","$options","key"],"sourceRoot":"","sources":["D:\\Project\\vue\\math-quiz\\src\\components\\OperatorQuiz.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div v-if=\"isQuizStarted\">\r\n      <h4>{{ operandLeft }} {{ operator }} {{ operandRight }}</h4>\r\n\r\n      <button\r\n        @click=\"selectAnswer(answer)\"\r\n        v-for=\"(answer, index) of answer\"\r\n        :key=\"index\"\r\n      >\r\n        {{ answer }}\r\n      </button>\r\n    </div>\r\n\r\n    <div v-if=\"!isQuizStarted\">\r\n      <button @click=\"startQuiz\">Start</button>\r\n    </div>\r\n    <button @click=\"$emit('onBack')\">Back</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: [\"operator\"],\r\n  data() {\r\n    return {\r\n      isQuizStarted: false,\r\n      operandLeft: null,\r\n      operandRight: null,\r\n      answers: [],\r\n      expectedAnswer: null,\r\n    };\r\n  },\r\n  methods: {\r\n    selectAnswer(answerSelected) {\r\n      if (answerSelected !== this.expectedAnswer) {\r\n        alert(\"Wrong Answer\");\r\n      }\r\n      this.startQuiz();\r\n    },\r\n    startQuiz() {\r\n      this.isQuizStarted = true;\r\n      this.operandLeft = parseInt(Math.random() * 13);\r\n      this.operandRight = parseInt(Math.random() * 13);\r\n\r\n      const methods = {\r\n        \"+\": (a, b) => a + b,\r\n        \"-\": (a, b) => a - b,\r\n        \"/\": (a, b) => a / b,\r\n        \"*\": (a, b) => a * b,\r\n      };\r\n\r\n      const methodTouse = methods[this.operator];\r\n\r\n      this.answers = [];\r\n      this.answers.push(methodTouse(this.operandLeft, this.operandRight + 1));\r\n      this.answers.push(methodTouse(this.operandLeft + 1, this.operandRight));\r\n      this.answers.push(\r\n        methodTouse(this.operandLeft + 1, this.operandRight + 1)\r\n      );\r\n      this.answers.push(\r\n        methodTouse(this.operandLeft - 1, this.operandRight + 1)\r\n      );\r\n      this.answers.push(methodTouse(this.operandLeft, this.operandRight - 1));\r\n\r\n      const expectedAnswer = methodTouse(this.operandLeft, this.operandRight);\r\n      this.answers[parseInt(Math.random() * this.answers.length)] =\r\n        expectedAnswer;\r\n      this.expectedAnswer = expectedAnswer;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}